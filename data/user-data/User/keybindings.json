// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+shift+s",
        "command": "workbench.action.files.saveAll"
    },
    {
        "key": "ctrl+k s",
        "command": "-workbench.action.files.saveAll"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+left",
        "command": "editor.action.moveCarretLeftAction"
    },
    {
        "key": "alt+right",
        "command": "editor.action.moveCarretRightAction"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+oem_2",
        "command": "-editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+oem_2",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+oem_2",
        "command": "extension.insertSemiColon",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+oem_1",
        "command": "-extension.insertSemiColon",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+oem_2",
        "command": "extension.removeSemiColon",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+oem_1",
        "command": "-extension.removeSemiColon",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+q",
        "command": "-extension.generateConsoleLog",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+1",
        "command": "editsHistory.moveCursorToPreviousEdit"
    },
    {
        "key": "ctrl+oem_minus",
        "command": "-editsHistory.moveCursorToPreviousEdit"
    },
    {
        "key": "alt+oem_3",
        "command": "editsHistory.moveCursorToNextEdit"
    },
    {
        "key": "ctrl+oem_plus",
        "command": "-editsHistory.moveCursorToNextEdit"
    },
    {
        "key": "alt+1",
        "command": "-workbench.action.openEditorAtIndex1"
    },
    {
        "key": "ctrl+k ctrl+z",
        "command": "editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+p",
        "command": "workbench.action.showAllSymbols"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "shift+space space",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "ctrl+shift+e",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "explorer.newFile"
    },
    {
        "key": "ctrl+alt+c",
        "command": "search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-search.action.copyPath",
        "when": "fileMatchOrFolderMatchWithResourceFocus"
    },
    {
        "key": "ctrl+alt+c",
        "command": "copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+n",
        "command": "explorer.newFolder"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "shift+space shift+space",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "alt+enter",
        "command": "-search.action.openInEditor",
        "when": "hasSearchResult && searchViewletFocus"
    },
    {
        "key": "ctrl+oem_comma",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "alt+enter",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_period",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "escape",
        "when": "panelFocus",
        "command": "workbench.action.closePanel"
    },
    {
        "command": "vscode-neovim.compositeEscape1",
        "key": "J",
        "when": "neovim.mode == insert",
        "args": "j"
    },
    {
        "command": "vscode-neovim.compositeEscape2",
        "key": "k",
        "when": "neovim.mode == insert",
        "args": "k"
    },
    {
        "key": "ctrl+l ctrl+k",
        "command": "extension.generateConsoleLog"
    },
    {
        "key": "shift+space",
        "command": "search.action.focusSearchList",
        "when": "searchInputBoxFocus"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "shift+space",
        "command": "workbench.view.search.focus",
        "when": "listFocus"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "y",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+c",
        "command": "-filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "p",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f2",
        "command": "-renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "c",
        "command": "renameFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "f",
        "command": "filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "d",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+space",
        "command": "problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "ctrl+down",
        "command": "-problems.action.focusProblemsFromFilter",
        "when": "problemsFilterFocus"
    },
    {
        "key": "shift+space",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+f",
        "command": "-problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "v",
        "command": "list.toggleSelection",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+p",
        "command": "-vscode-neovim.history-up-cmdline",
        "when": "neovim.mode == 'cmdline_normal'"
    },
    // {
    //     "key": "ctrl+n",
    //     "command": "-vscode-neovim.history-down-cmdline",
    //     "when": "neovim.mode == 'cmdline_normal'"
    // },
    {
        "key": "ctrl+j",
        "command": "vscode-neovim.history-down-cmdline",
        "when": "neovim.mode == 'cmdline_normal'"
    },
    {
        "key": "down",
        "command": "-vscode-neovim.history-down-cmdline",
        "when": "neovim.mode == 'cmdline_normal'"
    },
    {
        "key": "ctrl+k",
        "command": "vscode-neovim.history-up-cmdline",
        "when": "neovim.mode == 'cmdline_normal'"
    },
    {
        "key": "up",
        "command": "-vscode-neovim.history-up-cmdline",
        "when": "neovim.mode == 'cmdline_normal'"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+n",
        "when": "editorTextFocus && neovim.mode != insert",
        "args": "<c-n>"
    },
    {
        "key": "ctrl+d",
        "command": "-vscode-neovim.ctrl-d",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+u",
        "command": "-vscode-neovim.ctrl-u",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "key": "ctrl+b",
        "command": "-vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+d",
        "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
        "args": "<C-D>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+u",
        "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
        "args": "<C-U>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+f",
        "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
        "args": "<C-F>"
    },
    {
        "command": "vscode-neovim.send",
        "key": "ctrl+b",
        "when": "editorTextFocus && neovim.init && neovim.mode != insert || neovim.recording",
        "args": "<C-B>"
    },
    {
        "key": "o",
        "command": "explorer.openAndPassFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "enter",
        "command": "-explorer.openAndPassFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    }
]
